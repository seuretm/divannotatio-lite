/*
 * Copyright (c) 2016 - UniFr.
 * DIVA group, University of Fribourg, Switzerland.
 */

package ch.unifr.diva.divannotation.textzone;

import ch.unifr.tei.facsimile.surfacegrp.surface.zone.TeiZone;
import ch.unifr.tei.teiheader.filedesc.sourcedesc.msdesc.physdesc.handdesc.handnote.TeiHandNote;
import ch.unifr.tei.teiheader.filedesc.sourcedesc.msdesc.physdesc.handdesc.handnote.TeiPersName;
import ch.unifr.tei.teiheader.filedesc.sourcedesc.msdesc.physdesc.handdesc.handnote.TeiPlaceName;
import ch.unifr.tei.utils.TeiLocus;
import ch.unifr.diva.divannotation.GUI;
import ch.unifr.diva.divannotation.TeiScrollableImagePanel;
import org.apache.log4j.Logger;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 * @author Manuel Bouillon <manuel.bouillon@unifr.ch>
 *         date: 2016.06.23
 *         brief: Panel for script and scribe identification
 *         (by manual tagging for now)
 */
@SuppressWarnings({"FieldCanBeLocal", "Convert2Lambda", "UnusedParameters"})
public class HandNotePanel extends TeiScrollableImagePanel {

    private static final Logger logger = Logger.getLogger(HandNotePanel.class);

    private boolean displayHelp = true;

    private DefaultListModel<TeiHandNote> handNoteListModel = new DefaultListModel<>();
    private DefaultListModel<TeiPersName> persNameListModel = new DefaultListModel<>();
    private DefaultListModel<TeiLocus> locusListModel = new DefaultListModel<>();

    /**
     * These fields are created by NetBeans Form Editor.
     * WARNING: Do NOT modify this code.
     * The content is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Fields">                          
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addHandNoteButton;
    private javax.swing.JButton addLocusButton;
    private javax.swing.JButton addPersNameButton;
    private javax.swing.JButton associateButton;
    private javax.swing.JTextField certTextField;
    private javax.swing.JButton delHandNoteButton;
    private javax.swing.JButton delLocusButton;
    private javax.swing.JButton delPersNameButton;
    private javax.swing.JButton dissociateButton;
    private javax.swing.JTextField fromTextField;
    private javax.swing.JList<TeiHandNote> handNoteList;
    private javax.swing.JLabel handNotesLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField keyTextField;
    private javax.swing.JList<TeiLocus> locusList;
    private javax.swing.JLabel locusesLabel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JScrollPane menuScrollPane;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel persNameLabel;
    private javax.swing.JList<TeiPersName> persNameList;
    private javax.swing.JTextField placeTextField;
    private javax.swing.JTextField refTextField;
    private javax.swing.JTextField roleTextField;
    private javax.swing.JTextField scribeTextField;
    private javax.swing.JTextField scriptTextField;
    private javax.swing.JTextField toTextField;
    // End of variables declaration//GEN-END:variables
    // </editor-fold>                        

    /**
     * Creates new form HandNotePanel
     *
     * @param gui the GUI
     */
    public HandNotePanel(GUI gui) {

        super(gui);

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        multiselect = true;
        selectableZoneTypes.add(ZONE_TYPES.TEXT_ZONE);
        selectableZoneTypes.add(ZONE_TYPES.TEXTSEG_ZONE);
        selectableZoneTypes.add(ZONE_TYPES.COMMENTSEG_ZONE);
        selectableZoneTypes.add(ZONE_TYPES.WORD_ZONE);
        selectableZoneTypes.add(ZONE_TYPES.CHAR_ZONE);
        defaultZoneType = ZONE_TYPES.TEXTSEG_ZONE;
        currentZoneType = defaultZoneType;
        initComponents();

        this.setLayout(new BorderLayout());
        this.add(panel, BorderLayout.CENTER);
        this.add(hScroll, BorderLayout.SOUTH);
        this.add(vScroll, BorderLayout.EAST);
        this.add(topPanel, BorderLayout.NORTH);
        this.add(leftPanel, BorderLayout.WEST);
        leftPanel.add(menuScrollPane);

        this.revalidate();

        setImage(bi);

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "Convert2Lambda", "Anonymous2MethodRef"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuScrollPane = new javax.swing.JScrollPane();
        menuPanel = new javax.swing.JPanel();
        handNotesLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        handNoteList = new javax.swing.JList<>();
        addHandNoteButton = new javax.swing.JButton();
        delHandNoteButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        scribeTextField = new AutoSavingJTextField();
        jLabel2 = new javax.swing.JLabel();
        scriptTextField = new AutoSavingJTextField();
        jLabel3 = new javax.swing.JLabel();
        placeTextField = new AutoSavingJTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        persNameList = new javax.swing.JList<>();
        persNameLabel = new javax.swing.JLabel();
        addPersNameButton = new javax.swing.JButton();
        delPersNameButton = new javax.swing.JButton();
        locusesLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        locusList = new javax.swing.JList<>();
        addLocusButton = new javax.swing.JButton();
        delLocusButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fromTextField = new AutoSavingJTextField();
        toTextField = new AutoSavingJTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        nameTextField = new AutoSavingJTextField();
        jLabel7 = new javax.swing.JLabel();
        refTextField = new AutoSavingJTextField();
        certTextField = new AutoSavingJTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        roleTextField = new AutoSavingJTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        keyTextField = new AutoSavingJTextField();
        associateButton = new javax.swing.JButton();
        dissociateButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        menuScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        handNotesLabel.setText("Handnotes");

        handNoteList.setModel(handNoteListModel);
        handNoteList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        handNoteList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                handNoteListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(handNoteList);

        addHandNoteButton.setText("Add");
        addHandNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHandNoteButtonActionPerformed(evt);
            }
        });

        delHandNoteButton.setText("Del");
        delHandNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delHandNoteButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Scribe");

        scribeTextField.setToolTipText("Press 'enter' to save modification");
        scribeTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        scribeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scribeTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Script");

        scriptTextField.setToolTipText("Press 'enter' to save modification");
        scriptTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        scriptTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scriptTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Place");

        placeTextField.setToolTipText("Press 'enter' to save modification");
        placeTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        placeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeTextFieldActionPerformed(evt);
            }
        });

        persNameList.setModel(persNameListModel);
        persNameList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                persNameListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(persNameList);

        persNameLabel.setText("PersNames");

        addPersNameButton.setText("Add");
        addPersNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPersNameButtonActionPerformed(evt);
            }
        });

        delPersNameButton.setText("Del");
        delPersNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delPersNameButtonActionPerformed(evt);
            }
        });

        locusesLabel.setText("Locuses");

        locusList.setModel(locusListModel);
        locusList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                locusListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(locusList);

        addLocusButton.setText("Add");
        addLocusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocusButtonActionPerformed(evt);
            }
        });

        delLocusButton.setText("Del");
        delLocusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delLocusButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("From");

        fromTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        fromTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromTextFieldActionPerformed(evt);
            }
        });

        toTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        toTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toTextFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("To");

        jLabel6.setText("Name");

        nameTextField.setToolTipText("Press 'enter' to save modification");
        nameTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        jLabel7.setText("ref");

        refTextField.setToolTipText("Press 'enter' to save modification");
        refTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        refTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refTextFieldActionPerformed(evt);
            }
        });

        certTextField.setToolTipText("Press 'enter' to save modification");
        certTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        certTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                certTextFieldActionPerformed(evt);
            }
        });

        jLabel8.setText("cert");

        jLabel9.setText("role");

        roleTextField.setToolTipText("Press 'enter' to save modification");
        roleTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        roleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleTextFieldActionPerformed(evt);
            }
        });

        jLabel10.setText("key");

        keyTextField.setToolTipText("Press 'enter' to save modification");
        keyTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        keyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyTextFieldActionPerformed(evt);
            }
        });

        associateButton.setText("Associate");
        associateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                associateButtonActionPerformed(evt);
            }
        });

        dissociateButton.setText("Dissociate");
        dissociateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dissociateButtonActionPerformed(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(helpButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(menuPanelLayout.createSequentialGroup()
                                    .addComponent(associateButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(dissociateButton))
                                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(menuPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(certTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(roleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(refTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(menuPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(menuPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(scribeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(menuPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(scriptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(menuPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(placeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(menuPanelLayout.createSequentialGroup()
                                        .addComponent(handNotesLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addHandNoteButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(delHandNoteButton))
                                    .addComponent(jScrollPane1)
                                    .addComponent(jScrollPane2)
                                    .addGroup(menuPanelLayout.createSequentialGroup()
                                        .addComponent(persNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addPersNameButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(delPersNameButton))
                                    .addGroup(menuPanelLayout.createSequentialGroup()
                                        .addComponent(locusesLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(addLocusButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(delLocusButton))
                                    .addComponent(jScrollPane3)
                                    .addComponent(jSeparator1)
                                    .addComponent(jSeparator2)
                                    .addGroup(menuPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(menuPanelLayout.createSequentialGroup()
                                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(toTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fromTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(handNotesLabel)
                    .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addHandNoteButton)
                        .addComponent(delHandNoteButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(associateButton)
                    .addComponent(dissociateButton))
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(scribeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(scriptTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(placeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(persNameLabel)
                    .addComponent(addPersNameButton)
                    .addComponent(delPersNameButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(keyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(refTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(roleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(certTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLocusButton)
                    .addComponent(delLocusButton)
                    .addComponent(locusesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fromTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(toTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(helpButton)
                .addContainerGap(66, Short.MAX_VALUE))
        );

        menuScrollPane.setViewportView(menuPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 965, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formFocusGained(java.awt.event.FocusEvent evt) throws IllegalArgumentException {//GEN-FIRST:event_formFocusGained
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        // Save current selection
        TeiHandNote selected = handNoteList.getSelectedValue();

        handNoteListModel.clear();
        scribeTextField.setText("");
        scriptTextField.setText("");
        placeTextField.setText("");

        if (gui.getTei().getHeader().getFileDesc().getSourceDesc().getMsDesc().getPhysDesc().getHandDesc() == null) {
            logger.fatal("Null handDesc, please update your TEI library.");
            throw new IllegalArgumentException("Null handDesc, please update your TEI library.");
        }

        for (TeiHandNote hn : gui.getTei().getHeader().getFileDesc().getSourceDesc().getMsDesc().getPhysDesc().getHandDesc().getHandNotes()) {
            handNoteListModel.addElement(hn);
            if (hn.getId() == null) {
                hn.setId("hn-" + hn.getScribe().replace(" ", "_") + "-" + hn.getScript().replace(" ", "_"));
                logger.warn("hand note without ID, using " + hn.getId());
            }
        }

        if (selected != null) {
            handNoteList.setSelectedValue(selected, true);
        }

        gui.updateSharedPanelItems();

        try {
            bi = gui.getImage();
            setImage(bi);
            getPanel().setZoom(gui.getZoom());
        } catch (Exception e) {
            String message = "Could not load the image from the selected graphic\n"
                    + gui.graphic.getURL() + "\n"
                    + "Reason given:\n" + e.getMessage();
            JOptionPane.showMessageDialog(null, message, "Loading error", JOptionPane.ERROR_MESSAGE);
            logger.error(message);
            gui.tabbedPane.setSelectedIndex(2);
        }

        //TODO check consistency between header and zones

        if (displayHelp) {
            helpButtonActionPerformed(new java.awt.event.ActionEvent(this, 0, ""));
            displayHelp = false;
        }

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_formFocusGained

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        //        JOptionPane.showMessageDialog(this,
        //                "Hand notes details are displayed on the left panel.\n" +
        //                        "Press 'enter' after modifying each field to save.\n\n" +
        //                        "To tag some zones: \n" +
        //                        "1. clic on the desired hand note \n" +
        //                        "2. clic on the desired zones \n" +
        //                        "3. clic on the associate button \n\n" +
        //                        "Zone colors legend: \n" +
        //                        "- yellow: selected zone\n" +
        //                        "- light blue: zones associated with currently selected hand note\n" +
        //                        "- dark blue: zones associated with another hand note\n" +
        //                        "- pink: zones not associated with any hand note\n",
        //                "Help dialog",
        //                JOptionPane.PLAIN_MESSAGE);

        final JOptionPane helpPane = new JOptionPane(
                "Hand notes details are displayed on the left panel.\n" +
                        "Press 'enter' after modifying each field to save.\n\n" +
                        "To tag some zones: \n" +
                        "1. clic on the desired hand note \n" +
                        "2. clic on the desired zones \n" +
                        "3. clic on the associate button \n\n" +
                        "Zone colors legend: \n" +
                        "- yellow: selected zone\n" +
                        "- light blue: zones associated with currently selected hand note\n" +
                        "- dark blue: zones associated with another hand note\n" +
                        "- pink: zones not associated with any hand note\n",
                JOptionPane.PLAIN_MESSAGE);

        final JDialog helpDialog = new JDialog(gui, "Help");
        helpDialog.setModalityType(JDialog.ModalityType.MODELESS);
        helpDialog.setContentPane(helpPane);
        helpDialog.pack();
        helpDialog.setLocationRelativeTo(gui);
        helpDialog.setVisible(true);

        helpPane.addPropertyChangeListener(
                new PropertyChangeListener() {
                    public void propertyChange(PropertyChangeEvent e) {
                        String prop = e.getPropertyName();

                        if (helpDialog.isVisible()
                                && (e.getSource() == helpPane)
                                && (prop.equals(JOptionPane.VALUE_PROPERTY))) {
                            helpDialog.dispose(); //setVisible(false);
                        }
                    }
                });

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_helpButtonActionPerformed

    private void dissociateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dissociateButtonActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        if (getSelectedZones().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a zone first.");
            logger.debug("no zone is selected");
            return;
        }
        for (TeiZone zone : getSelectedZones()) {
            zone.setHandNote(null);
        }

        // TODO remove locus from locus list if needed

        getSelectedZones().clear();
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_dissociateButtonActionPerformed

    private void associateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_associateButtonActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiHandNote hn = handNoteList.getSelectedValue();
        if (hn == null) {
            JOptionPane.showMessageDialog(this, "Please select a handnote first.");
            logger.debug("no handnote is selected");
            return;
        }
        for (TeiZone zone : getSelectedZones()) {
            zone.setHandNote(hn);
            logger.debug("zone " + zone + " is associated to handnote " + hn);
        }

        // TODO add locus to locus list if needed

        getSelectedZones().clear();
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_associateButtonActionPerformed

    private void keyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiPersName pn = persNameList.getSelectedValue();
        if (pn == null) {
            logger.trace("null persName");
            return;
        }

        logger.debug("Modify key: " + keyTextField.getText());
        pn.setKey(keyTextField.getText());
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_keyTextFieldActionPerformed

    private void roleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiPersName pn = persNameList.getSelectedValue();
        if (pn == null) {
            logger.trace("null persName");
            return;
        }

        logger.debug("Modify role: " + roleTextField.getText());
        pn.setRole(roleTextField.getText());
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_roleTextFieldActionPerformed

    private void certTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_certTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiPersName pn = persNameList.getSelectedValue();
        if (pn == null) {
            logger.trace("null persName");
            return;
        }
        logger.debug("Modify cert: " + certTextField.getText());
        pn.setCert(certTextField.getText());
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_certTextFieldActionPerformed

    private void refTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiPersName pn = persNameList.getSelectedValue();
        if (pn == null) {
            logger.trace("null persName");
            return;
        }

        logger.debug("Modify ref: " + refTextField.getText());
        pn.setRef(refTextField.getText());
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_refTextFieldActionPerformed

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiPersName pn = persNameList.getSelectedValue();
        if (pn == null) {
            logger.trace("null persName");
            return;
        }

        logger.debug("Modify name: " + nameTextField.getText());
        pn.setContent(nameTextField.getText());
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_nameTextFieldActionPerformed

    private void toTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        if ("".equals(toTextField.getText())) {
            return;
        }

        TeiLocus l = locusList.getSelectedValue();
        if (l == null) {
            logger.trace("null locus");
            return;
        }

        try {
            logger.debug("Modify to: " + toTextField.getText());
            l.setTo(Integer.valueOf(toTextField.getText()));
        } catch (NumberFormatException e) {
            logger.error("cannot modify to, integer expected given: " + toTextField.getText());
        }

        //        if (l.getTo() < l.getFrom()) {
        //            l.setTo(l.getFrom());
        //        }

        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_toTextFieldActionPerformed

    private void fromTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        if ("".equals(fromTextField.getText())) {
            return;
        }

        TeiLocus l = locusList.getSelectedValue();
        if (l == null) {
            logger.trace("null locus");
            return;
        }

        try {
            l.setFrom(Integer.valueOf(fromTextField.getText()));
            logger.debug("Modify from: " + fromTextField.getText());
        } catch (NumberFormatException e) {
            logger.error("cannot modify from, integer expected given: " + fromTextField.getText());
        }

        //        if (l.getTo() > l.getFrom()) {
        //            l.setFrom(l.getTo());
        //        }

        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_fromTextFieldActionPerformed

    private void delLocusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delLocusButtonActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiLocus l = locusList.getSelectedValue();
        if (l == null) {
            logger.trace("null locus");
            return;
        }

        logger.debug("Del locus: " + l.getId());
        handNoteList.getSelectedValue().removeLocus(l.getId());
        locusListModel.removeElement(l);
        locusList.clearSelection();
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_delLocusButtonActionPerformed

    private void addLocusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocusButtonActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        if (handNoteList.getSelectedValue() == null) {
            logger.trace("null handnote");
            return;
        }
        TeiLocus l = handNoteList.getSelectedValue().addLocus();
        if (l == null) {
            logger.trace("null locus");
            return;
        }

        if (l.getId() == null) {
            l.setId("l-" + l.getRandomId());
            logger.warn("locus without ID, using " + l.getId());
        }
        logger.debug("Add locus: " + l.getId());
        locusListModel.addElement(l);
        locusList.setSelectedIndex(locusListModel.size() - 1);
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_addLocusButtonActionPerformed

    private void locusListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_locusListValueChanged
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        if (evt.getValueIsAdjusting()) {
            return; // ignoring unfinished selection
        }

        TeiLocus l = locusList.getSelectedValue();
        if (l == null) {
            logger.debug("null locus… ");
            fromTextField.setText("");
            toTextField.setText("");
        } else {
            logger.debug("Select locus: " + l.getId());
            fromTextField.setText("" + l.getFrom());
            toTextField.setText("" + l.getTo());
        }

        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_locusListValueChanged

    private void delPersNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delPersNameButtonActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        if (handNoteList.getSelectedValue() == null) {
            logger.trace("null handnote");
            return;
        }
        TeiPersName pn = persNameList.getSelectedValue();
        if (pn == null) {
            logger.trace("null persName");
            return;
        }

        logger.debug("Del persName: " + pn.getId());
        handNoteList.getSelectedValue().removePersName(pn.getId());
        persNameListModel.removeElement(pn);
        persNameList.clearSelection();
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_delPersNameButtonActionPerformed

    private void addPersNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPersNameButtonActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        if (handNoteList.getSelectedValue() == null) {
            logger.trace("null handnote");
            return;
        }
        TeiPersName pn = handNoteList.getSelectedValue().addPersName();
        if (pn == null) {
            logger.trace("null persName");
            return;
        }

        if (pn.getId() == null) {
            pn.setId("p-" + pn.getRandomId());
            logger.warn("persName without ID, using " + pn.getId());
        }
        logger.debug("Add persName: " + pn.getId());
        persNameListModel.addElement(pn);
        persNameList.setSelectedIndex(persNameListModel.size() - 1);
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_addPersNameButtonActionPerformed

    private void persNameListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_persNameListValueChanged
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        if (evt.getValueIsAdjusting()) {
            logger.trace("ValueIsAdjusting");
            return; // ignoring unfinished selection
        }

        TeiPersName pn = persNameList.getSelectedValue();
        if (pn == null) {
            logger.debug("null persName… ");
            nameTextField.setText("");
            keyTextField.setText("");
            refTextField.setText("");
            roleTextField.setText("");
            certTextField.setText("");
        } else {
            logger.debug("Select persName: " + pn.getId());
            nameTextField.setText(pn.getContent());
            keyTextField.setText(pn.getKey());
            refTextField.setText(pn.getRef());
            roleTextField.setText(pn.getRole());
            certTextField.setText(pn.getCert());
        }

        repaint();
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_persNameListValueChanged

    private void placeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiHandNote hn = handNoteList.getSelectedValue();
        if (hn == null) {
            logger.trace("null handnote");
            return;
        }

        logger.debug("Modify place: " + placeTextField.getText());
        if (hn.getPlaceName() != null) {
            hn.getPlaceName().setContent(placeTextField.getText());
        } else {
            TeiPlaceName pn = new TeiPlaceName(hn);
            pn.setContent(placeTextField.getText());
            hn.setPlaceName(pn);
        }
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_placeTextFieldActionPerformed

    private void scriptTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scriptTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiHandNote hn = handNoteList.getSelectedValue();
        if (hn == null) {
            logger.trace("null handnote");
            return;
        }

        logger.debug("Modify script: " + scriptTextField.getText());
        hn.setScript(scriptTextField.getText());
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_scriptTextFieldActionPerformed

    private void scribeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scribeTextFieldActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiHandNote hn = handNoteList.getSelectedValue();
        if (hn == null) {
            logger.trace("null handnote");
            return;
        }

        logger.debug("Modify scribe: " + scribeTextField.getText());
        hn.setScribe(scribeTextField.getText());
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_scribeTextFieldActionPerformed

    private void delHandNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delHandNoteButtonActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiHandNote hn = handNoteList.getSelectedValue();
        if (hn == null) {
            logger.trace("null handnote");
            return;
        }

        if (locusListModel.size() > 0) {
            String message = "Selected hand note is used to tag some text zones, cannot be deleted.";
            JOptionPane.showMessageDialog(this, message, "delHandNote error", JOptionPane.ERROR_MESSAGE);
            logger.debug(message);
        } else {
            String message = "Are you sure you want to delete selected hand note? (cannot be undone)";
            int n = JOptionPane.showConfirmDialog(this, message, "delHandNote confirmation", JOptionPane.YES_NO_OPTION);
            logger.debug(message);
            if (n == 0) {
                logger.debug("Del hand note: " + hn.getId());
                gui.getTei().getHeader().getFileDesc().getSourceDesc().getMsDesc().getPhysDesc().getHandDesc().removeHandNote(hn.getId());
                handNoteListModel.removeElement(hn);
                repaint();
            }
        }

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_delHandNoteButtonActionPerformed

    private void addHandNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHandNoteButtonActionPerformed
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        TeiHandNote hn = gui.getTei().getHeader().getFileDesc().getSourceDesc().getMsDesc().getPhysDesc().getHandDesc().addHandNote();
        if (hn == null) {
            logger.trace("null handnote");
            return;
        }

        if (hn.getId() == null) {
            hn.setId("hn-" + hn.getRandomId());
            logger.warn("hand note without ID, using " + hn.getId());
        }
        logger.debug("Add hand note: " + hn.getId());
        handNoteListModel.addElement(hn);
        handNoteList.setSelectedIndex(handNoteListModel.size() - 1);
        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_addHandNoteButtonActionPerformed

    private void handNoteListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_handNoteListValueChanged
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());

        if (evt.getValueIsAdjusting()) {
            return; // ignoring unfinished selection
            // Mandatory because two events are fired for each mouse selection
        }

        persNameListModel.clear();
        locusListModel.clear();

        TeiHandNote hn = handNoteList.getSelectedValue();
        if (hn == null) {
            logger.debug("null handnote… ");
            scribeTextField.setText("");
            scriptTextField.setText("");
            placeTextField.setText("");
        } else {
            logger.debug("Select hand note: " + hn.getId());
            scribeTextField.setText(hn.getScribe());
            scriptTextField.setText(hn.getScript());

            if (hn.getPlaceName() != null) {
                placeTextField.setText(hn.getPlaceName().getContent());
            } else {
                placeTextField.setText("");
            }

            for (TeiPersName pn : hn.getPersNames()) {
                persNameListModel.addElement(pn);
                if (pn.getId() == null) {
                    pn.setId("p-" + pn.getContent().replace(" ", "_"));
                    logger.warn("persName without ID, using " + pn.getId());
                }
            }
            if (persNameListModel.size() > 0) {
                persNameList.setSelectedIndex(0);
            }

            for (TeiLocus l : hn.getLocuses()) {
                locusListModel.addElement(l);
                if (l.getId() == null) {
                    l.setId("l-" + l.getFrom() + "-" + l.getTo());
                    logger.warn("locus without ID, using " + l.getId());
                }
            }
            if (locusListModel.size() > 0) {
                locusList.setSelectedIndex(0);
            }
        }

        repaint();

        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }//GEN-LAST:event_handNoteListValueChanged

    @Override
    public void mouseDraggedEvent(MouseEvent me) {
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }

    @Override
    public void mouseClickedEvent(MouseEvent me) {
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
        Point2D pt = new Point2D.Float(getRealX(me.getX()), getRealY(me.getY()));
        toggleSelectedZone(getSelectedZone(pt, currentZoneType));
        repaint();
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }

    @Override
    public void mousePressedEvent(MouseEvent me) {
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
        pressX = getRealX(me.getX());
        pressY = getRealY(me.getY());
        Point2D press = new Point2D.Float(pressX, pressY);
        if (getFirstSelectedZone() != null) {
            handlePressedShape(press);
        }
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }

    @Override
    public void mouseReleasedEvent(MouseEvent me) {
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }

    @Override
    public void paintPanel(Graphics2D g) {
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
        g.setColor(Color.BLACK);
        TeiHandNote hn = handNoteList.getSelectedValue();
        paintTextZones(g, hn);
        paintDecorationZones(g);
        getPanel().setZoom(gui.getZoom());
        logger.trace(Thread.currentThread().getStackTrace()[1].getMethodName());
    }

}
